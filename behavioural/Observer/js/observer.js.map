{"version":3,"file":"observer.js","mappings":"gHAGA,wBAGEA,YAAmBC,GAAA,KAAAA,QAAAA,EAFX,KAAAC,UAAwB,EAEe,CAC/CC,aAAaC,GACXA,EAASC,SAASD,IACXE,KAAKJ,UAAUK,SAASH,IAC3BE,KAAKJ,UAAUM,KAAKJ,E,GAG1B,CACAK,YAAYL,GACV,MAAMM,EAAgBJ,KAAKJ,UAAUS,QAAQP,IACtB,IAAnBM,GACFJ,KAAKJ,UAAUU,OAAOF,EAAe,EAEzC,CACAG,SACEP,KAAKJ,UAAUG,SAASD,GAAaA,EAASU,OAAOR,OACvD,E,4FCpBF,eAEA,0BACEN,YAAmBC,GAAA,KAAAA,QAAAA,CAAgC,CAEnDa,OAAOC,GACDA,aAAsB,EAAAC,kBACxBV,KAAKL,QAAQgB,UAAYF,EAAWd,QAAQiB,MAEhD,E,GCVEC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,MCtBA,eACA,SAQA,SAAgBG,IACd,MAAMC,EAAYC,SAASC,cAAc,KAGzC,OAFAD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAUX,UAAY,2BACfW,CACT,CAEA,MAAMK,EAAQ,IAAI,EAAAjB,gBAblB,WACE,MAAMiB,EAAQJ,SAASC,cAAc,SAErC,OADAD,SAASE,KAAKC,YAAYC,GACnBA,CACT,CASkCC,IAC5BN,EAAY,IAAI,EAAAO,kBAAkBR,KAClCS,EAAa,IAAI,EAAAD,kBAAkBR,KACnCU,EAAa,IAAI,EAAAF,kBAAkBR,KACzCM,EAAM9B,UAAUyB,EAAWQ,EAAYC,GAEvCJ,EAAMhC,QAAQqC,iBAAiB,SAAS,KACtCL,EAAMpB,QAAQ,IAGhBoB,EAAMxB,YAAY2B,E","sources":["webpack://typescript-gof/./behavioural/Observer/classes/Input-Observable.ts","webpack://typescript-gof/./behavioural/Observer/classes/Paragraph-Observer.ts","webpack://typescript-gof/webpack/bootstrap","webpack://typescript-gof/./behavioural/Observer/Client-Code.ts"],"sourcesContent":["import { Observable } from \"../interfaces/Observable\";\nimport { Observer } from \"../interfaces/Observer\";\n\nexport class InputObservable implements Observable {\n  private observers: Observer[] = [];\n\n  constructor(public element: HTMLInputElement) {}\n  subscribe(...observer: Observer[]): void {\n    observer.forEach((observer) => {\n      if (!this.observers.includes(observer)) {\n        this.observers.push(observer);\n      }\n    });\n  }\n  unsubscribe(observer: Observer): void {\n    const observerIndex = this.observers.indexOf(observer);\n    if (observerIndex !== -1) {\n      this.observers.splice(observerIndex, 1);\n    }\n  }\n  notify(): void {\n    this.observers.forEach((observer) => observer.update(this));\n  }\n}\n","import { Observable } from \"../interfaces/Observable\";\nimport { Observer } from \"../interfaces/Observer\";\nimport { InputObservable } from \"./Input-Observable\";\n\nexport class ParagraphObserver implements Observer {\n  constructor(public element: HTMLParagraphElement) {}\n\n  update(observable: Observable): void {\n    if (observable instanceof InputObservable) {\n      this.element.innerText = observable.element.value;\n    }\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { InputObservable } from \"./classes/Input-Observable\";\nimport { ParagraphObserver } from \"./classes/Paragraph-Observer\";\n\nexport function makeInput(): HTMLInputElement {\n  const input = document.createElement(\"input\");\n  document.body.appendChild(input);\n  return input;\n}\n\nexport function makeParagraph(): HTMLParagraphElement {\n  const paragraph = document.createElement(\"p\");\n  document.body.appendChild(paragraph);\n  paragraph.innerText = \"Text inicial (Hardcoded)\";\n  return paragraph;\n}\n\nconst input = new InputObservable(makeInput());\nconst paragraph = new ParagraphObserver(makeParagraph());\nconst paragraph2 = new ParagraphObserver(makeParagraph());\nconst paragraph3 = new ParagraphObserver(makeParagraph());\ninput.subscribe(paragraph, paragraph2, paragraph3);\n\ninput.element.addEventListener(\"keyup\", () => {\n  input.notify();\n});\n\ninput.unsubscribe(paragraph2);\n"],"names":["constructor","element","observers","subscribe","observer","forEach","this","includes","push","unsubscribe","observerIndex","indexOf","splice","notify","update","observable","InputObservable","innerText","value","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","makeParagraph","paragraph","document","createElement","body","appendChild","input","makeInput","ParagraphObserver","paragraph2","paragraph3","addEventListener"],"sourceRoot":""}